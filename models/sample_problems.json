[
  {
    "problemId": 1,
    "title": "K번째 수",
    "completedUsers": [],
    "difficultyLevel": 1,
    "description": "배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다. 예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면 array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다. 2에서 나온 배열의 3번째 숫자는 5입니다. 배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.",
    "restrictions": [
      "array의 길이는 1 이상 100 이하입니다.",
      "array의 각 원소는 1 이상 100 이하입니다.",
      "commands의 길이는 1 이상 50 이하입니다.",
      "commands의 각 원소는 길이가 3입니다."
    ],
    "examples": [
      [
        { "array": [1, 5, 2, 6, 3, 7, 4] },
        { "commands": [[2, 5, 3], [4, 4, 1], [1, 7, 3]] },
        { "return": [5, 6, 3] }
      ]
    ],
    "examplesDescription": [
      "[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.",
      "[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.",
      "[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다."
    ],
    "arguments": ["array", "commands"],
    "reference": "https://neerc.ifmo.ru/subregions/northern.html",
    "userInput": "",
    "initialInput": "function solution(array, commands) {\n  // your code goes here...\n}",
    "tests": [
      {
        "code": "solution([1, 5, 2, 6, 3, 7, 4], [[2, 5, 3], [4, 4, 1], [1, 7, 3]])",
        "expected": [5, 6, 3]
      }
    ]
  },
  {
    "problemId": 2,
    "title": "완주하지 못한 선수",
    "completedUsers": [],
    "difficultyLevel": 1,
    "description": "수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다. 마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.",
    "restrictions": [
      "마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.",
      "completion의 길이는 participant의 길이보다 1 작습니다.",
      "참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.",
      "참가자 중에는 동명이인이 있을 수 있습니다."
    ],
    "examples": [
      [
        { "participants": ["leo", "kiki", "eden"] },
        { "completion": ["eden", "kiki"] },
        { "return": "leo" }
      ],
      [
        { "participants": ["marina", "josipa", "nikola", "vinko", "filipa"] },
        { "completion": ["josipa", "filipa", "marina", "nikola"] },
        { "return": "vinko" }
      ],
      [
        { "participants": ["mislav", "stanko", "mislav", "ana"] },
        { "completion": ["stanko", "ana", "mislav"] },
        { "return": "mislav" }
      ]
    ],
    "examplesDescription": [
      "leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.",
      "vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.",
      "mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다."
    ],
    "arguments": ["participants", "completion"],
    "reference": "http://hsin.hr/coci/archive/2014_2015/contest2_tasks.pdf",
    "userInput": "",
    "initialInput": "function solution(participants, completion) {\n  // your code goes here...\n}",
    "tests": [
      {
        "code": "solution(['leo', 'kiki', 'eden'], ['eden', 'kiki'])",
        "expected": "leo"
      },
      {
        "code": "solution(['marina', 'josipa', 'nikola', 'vinko', 'filipa'], ['josipa', 'filipa', 'marina', 'nikola'])",
        "expected": "vinko"
      },
      {
        "code": "solution(['mislav', 'stanko', 'mislav', 'ana'], ['stanko', 'ana', 'mislav'])",
        "expected": "mislav"
      }
    ]
  },
  {
    "problemId": 3,
    "title": "가운데 글자 가져오기",
    "completedUsers": [],
    "difficultyLevel": 1,
    "description": "단어 s의 가운데 글자를 반환하는 함수, solution을 만들어 보세요. 단어의 길이가 짝수라면 가운데 두글자를 반환하면 됩니다.",
    "restrictions": [
      "s는 길이가 1 이상, 100이하인 스트링입니다."
    ],
    "examples": [
      [
        { "string": "abcde" },
        { "return": "c" }
      ],
      [
        { "string": "qwer" },
        { "return": "we" }
      ]
    ],
    "examplesDescription": [],
    "arguments": ["string"],
    "reference": "",
    "userInput": "",
    "initialInput": "function solution(string) {\n  // your code goes here...\n}",
    "tests": [
      {
        "code": "solution('abcde')",
        "expected": "c"
      },
      {
        "code": "solution('qwer')",
        "expected": "we"
      }
    ]
  },
  {
    "problemId": 4,
    "title": "서울에서 김서방 찾기",
    "completedUsers": [],
    "difficultyLevel": 1,
    "description": "String형 배열 seoul의 element중 Kim의 위치 x를 찾아, 김서방은 x에 있다는 String을 반환하는 함수, solution을 완성하세요. seoul에 Kim은 오직 한 번만 나타나며 잘못된 값이 입력되는 경우는 없습니다.",
    "restrictions": [
      "seoul은 길이 1 이상, 1000 이하인 배열입니다.",
      "seoul의 원소는 길이 1 이상, 20 이하인 문자열입니다.",
      "Kim은 반드시 seoul 안에 포함되어 있습니다."
    ],
    "examples": [
      [
        { "seoul": ["Jane", "Kim"] },
        { "return": "김서방은 1에 있다" }
      ],
      [
        { "string": ["Jane", "Huh", "Kim"] },
        { "return": "김서방은 2에 있다" }
      ]
    ],
    "examplesDescription": [],
    "arguments": ["seoul"],
    "reference": "",
    "userInput": "",
    "initialInput": "function solution(seoul) {\n  // your code goes here...\n}",
    "tests": [
      {
        "code": "solution(['Jane', 'Kim'])",
        "expected": "김서방은 1에 있다"
      },
      {
        "code": "solution(['Jane', 'Huh', 'Kim'])",
        "expected": "김서방은 2에 있다"
      }
    ]
  },
  {
    "problemId": 5,
    "title": "서머/윈터코딩 - 예산",
    "completedUsers": [],
    "difficultyLevel": 1,
    "description": "S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다. 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다. 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.",
    "restrictions": [
      "d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.",
      "d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.",
      "budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다."
    ],
    "examples": [
      [
        { "d": [1,3,2,5,4] },
        { "budget": 9 },
        { "return": 3 }
      ],
      [
        { "d": [2,2,3,3] },
        { "budget": 10 },
        { "return": 4 }
      ]
    ],
    "examplesDescription": [
      "각 부서에서 [1원, 3원, 2원, 5원, 4원]만큼의 금액을 신청했습니다. 만약에, 1원, 2원, 4원을 신청한 부서의 물품을 구매해주면 예산 9원에서 7원이 소비되어 2원이 남습니다. 항상 정확히 신청한 금액만큼 지원해 줘야 하므로 남은 2원으로 나머지 부서를 지원해 주지 않습니다. 위 방법 외에 3개 부서를 지원해 줄 방법들은 다음과 같습니다. 1원, 2원, 3원을 신청한 부서의 물품을 구매해주려면 6원이 필요합니다. 1원, 2원, 5원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다. 1원, 3원, 4원을 신청한 부서의 물품을 구매해주려면 8원이 필요합니다. 1원, 3원, 5원을 신청한 부서의 물품을 구매해주려면 9원이 필요합니다. 3개 부서보다 더 많은 부서의 물품을 구매해 줄 수는 없으므로 최대 3개 부서의 물품을 구매해 줄 수 있습니다.",
      "모든 부서의 물품을 구매해주면 10원이 됩니다. 따라서 최대 4개 부서의 물품을 구매해 줄 수 있습니다."
    ],
    "arguments": ["d", "budget"],
    "reference": "",
    "userInput": "",
    "initialInput": "function solution(d, budget) {\n  // your code goes here...\n}",
    "tests": [
      {
        "code": "solution([1, 3, 2, 5, 4], 9)",
        "expected": 3
      },
      {
        "code": "solution([2, 2, 3, 3], 10)",
        "expected": 4
      }
    ]
  }
]
